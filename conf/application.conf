## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key = "changeme"
play.http.secret.key = ${?APPLICATION_SECRET}

## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to enable, you can list them here.
  enabled += "play.modules.swagger.SwaggerModule"

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = [ "en" ]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Filters
  # https://www.playframework.com/documentation/latest/ScalaHttpFilters
  # https://www.playframework.com/documentation/latest/JavaHttpFilters
  # ~~~~~
  # Filters run code on every request. They can be used to perform
  # common logic for all your actions, e.g. adding common headers.
  # Defaults to "Filters" in the root package (aka "apps" folder)
  # Alternatively you can explicitly register a class here.
  filters = filters.Filters
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~

  # When this is put inside the ssl section, a dependancy error occurs?
  # loose.acceptAnyCertificate=true
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
    loose.acceptAnyCertificate=true
  }
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.  You must enable this by adding to build.sbt:
#
# libraryDependencies += filters
#
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }
}

api.version = "alpha"
swagger.filter = "filters.SwaggerConfigurationFilter"
swagger.api.info = {
  title = "Statistical Business Register Control API",
  description = "SBR Api",
  contact = "SBR Support Team",
  termsOfService = "https://www.ons.gov.uk/help/termsandconditions",
  licence = "MIT",
  licenceUrl = "https://github.com/ONSdigital/sbr-api/blob/master/LICENSE"
}

db {
  hbase-rest {
    # Authentication
    username = ""
    username = ${?HBASE_AUTHENTICATION_USERNAME}
    password = ""
    password = ${?HBASE_AUTHENTICATION_PASSWORD}

    delimiter = "~"
    delimiter = ${?HBASE_REST_DELIMITER}

    timeout = 3000
    timeout = ${?HBASE_REST_TIMEOUT}

    # Column family, namespace & table name config
    namespace = "sbr_control_db"
    namespace = ${?HBASE_NAMESPACE}

    protocol = "http"
    protocol = ${?SBR_DB_PROTOCOL}

    host = "localhost"
    host = ${?SBR_DB_HOST}

    port = "8080"
    port = ${?SBR_DB_PORT}

    prefix = ""
    prefix = ${?SBR_DB_PREFIX}

    column.family.enterprise = "d"
    column.family.enterprise = ${?SBR_DB_COLUMN_FAMILY_ENTERPRISE}

    enterprise.table.name = "enterprise"
    enterprise.table.name = ${?SBR_DB_ENTERPRISE_TABLE_NAME}

    unit.links.table.name = "unit_link"
    unit.links.table.name = ${?SBR_DB_UNIT_LINKS_TABLE_NAME}

    column.family.unit.links = "l"
    column.family.unit.links = ${?SBR_DB_COLUMN_FAMILY_UNIT_LINKS}

    localunit.table.name = "local_unit"
    localunit.table.name = ${?SBR_DB_LOCALUNIT_TABLE_NAME}

    legalunit.table.name = "legal_unit"
    legalunit.table.name = ${?SBR_DB_LEGALUNIT_TABLE_NAME}

    reportingunit.table.name = "reporting_unit"
    reportingunit.table.name = ${?SBR_DB_REPORTINGUNIT_TABLE_NAME}
  }
}

kamon {
  environment {
    service = "sbr-control-api"
  }

  trace {
    join-remote-parents-with-same-span-id = true
    sampler = always
    sampler = ${?SBR_TRACING_SAMPLER}
  }

  reporters = ["kamon.zipkin.ZipkinReporter"]

  zipkin {
    host = "localhost"
    host = ${?SBR_TRACING_REPORTER_HOST}
    port = 9411
    port = ${?SBR_TRACING_REPORTER_PORT}
  }
}

api {
  admin {
    data {
      vat {
        protocol = "http"
        protocol = ${?SBR_VAT_ADMIN_DATA_API_PROTOCOL}
        host = "localhost"
        host = ${?SBR_VAT_ADMIN_DATA_API_HOST}
        port = 9005
        port = ${?SBR_VAT_ADMIN_DATA_API_PORT}
      }

      paye {
        protocol = "http"
        protocol = ${?SBR_PAYE_ADMIN_DATA_API_PROTOCOL}
        host = "localhost"
        host = ${?SBR_PAYE_ADMIN_DATA_API_HOST}
        port = 9005
        port = ${?SBR_PAYE_ADMIN_DATA_API_PORT}
      }
    }
  }
}